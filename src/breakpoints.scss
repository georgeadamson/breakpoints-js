
// Up to you:
$smallDeviceMaxWidth  : 40em;
$mediumDeviceMaxWidth : 80em;
$largeDeviceMaxWidth  : 100em;

// Rudimentary detection of display type using breakpoints defined in the CSS. Store the results in global object variable.
// The advantage of this technique is simply that the breakpoints don't have to be defined and duplicated in the JS too.
// Eg: window.breakpoints.phone === true
// IMPORTANT: Must be used with breakpoints.scss.
//            Use with respond.js to use this Media Query technique in IE6-8 etc.
// By George Adamson - https://github.com/georgeadamson/breakpoints-js

/* Define the names of all our breakpoints: */
// (Not required but useful to produce a hash of possible breakpoints and their current state by iterating through this list)
HEAD * { font-family: "breakpoints","small","medium","large","giant"; }

// Detect "current" display name using mediaqueries: (Javascript can read this to find out currently applicable display)

/* When media-queries not supported: */
// Eg: IE6-8 without respondjs will see .no-breakpoints class on HTML element.
HEAD { font-family: 'breakpoints'; }

/* Otherwise when media-queries are supported: */ 
@media (min-width: $largeDeviceMaxWidth ) { HEAD { font-family: "giant";  } }    // Eg: Large desktop
@media (max-width: $largeDeviceMaxWidth ) { HEAD { font-family: "large";  } }    // Eg: Small desktop
@media (max-width: $mediumDeviceMaxWidth) { HEAD { font-family: "medium"; } }    // Eg: Tablet
@media (max-width: $smallDeviceMaxWidth ) { HEAD { font-family: "small";  } }    // Eg: Phone
